import java.time.LocalDateTime

plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'pl.kurs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
// https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.1'

// https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.1'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.1'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.auth0:java-jwt:3.8.3'

	implementation 'org.ehcache:ehcache:3.8.1'
	implementation 'javax.cache:cache-api:1.1.1'
	implementation 'org.liquibase:liquibase-core'

	runtimeOnly 'mysql:mysql-connector-java'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

task generatePostsAndComments() {
	doLast {
		File dataSql = file("src/main/resources/data.sql")
		dataSql.write("")
		//posty
		for (int i = 1; i <= 100; i++) {
			dataSql.append("insert into post(id, title, content, created_at) " +
					"values ('${i}', 'Test post ${i}', 'Content ${i}', '"+ LocalDateTime.now().minusDays(i) +"');\n")
		}
		//komentarze
		for (int i = 1; i <= 100; i++) {
			int postId = 1 + i / 10
			dataSql.append("insert into comment(id, post_id, content, created_at) " +
					"values ('${i}', '${postId}', 'Comment ${i}', '"+ LocalDateTime.now().minusDays(i) +"');\n")
		}
	}
}

